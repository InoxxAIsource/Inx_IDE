import { type NextRequest, NextResponse } from "next/server"
import { put } from "@vercel/blob"
import JSZip from "jszip"

export async function POST(req: NextRequest) {
  try {
    const { componentName, code, includePackageJson = true } = await req.json()

    if (!componentName || !code) {
      return NextResponse.json({ error: "Component name and code are required" }, { status: 400 })
    }

    // Create ZIP file
    const zip = new JSZip()

    // Add component file
    zip.file(`components/${componentName}.tsx`, code)

    // Add package.json if requested
    if (includePackageJson) {
      const packageJson = {
        name: componentName.toLowerCase().replace(/[^a-z0-9]/g, "-"),
        version: "1.0.0",
        private: true,
        scripts: {
          dev: "next dev",
          build: "next build",
          start: "next start",
          lint: "next lint",
        },
        dependencies: {
          react: "^18.2.0",
          "react-dom": "^18.2.0",
          next: "^14.0.0",
          typescript: "^5.0.0",
          "@types/react": "^18.2.0",
          "@types/react-dom": "^18.2.0",
          tailwindcss: "^3.3.0",
          "lucide-react": "^0.263.1",
        },
        devDependencies: {
          "@types/node": "^20.0.0",
          eslint: "^8.0.0",
          "eslint-config-next": "^14.0.0",
          autoprefixer: "^10.4.0",
          postcss: "^8.4.0",
        },
      }
      zip.file("package.json", JSON.stringify(packageJson, null, 2))
    }

    // Add README
    const readme = `# ${componentName}

Generated by INNOXAI - AI Full-Stack Developer Agent

## Installation

\`\`\`bash
npm install
\`\`\`

## Development

\`\`\`bash
npm run dev
\`\`\`

## Features

- React with TypeScript
- Tailwind CSS styling
- Responsive design
- Production-ready code

Generated on: ${new Date().toLocaleString()}
`
    zip.file("README.md", readme)

    // Generate ZIP buffer
    const zipBuffer = await zip.generateAsync({ type: "arraybuffer" })

    // Save to blob storage
    const blob = await put(`exports/${componentName}_${Date.now()}.zip`, zipBuffer, {
      access: "public",
    })

    return NextResponse.json({
      success: true,
      downloadUrl: blob.url,
      filename: `${componentName}.zip`,
    })
  } catch (error) {
    console.error("Failed to create export:", error)
    return NextResponse.json({ error: "Failed to create export" }, { status: 500 })
  }
}
